set -e

function validate_yaml {
    # Initial validation to exit early if invalid YAML
    # as per https://mikefarah.gitbook.io/yq/usage/tips-and-tricks#validating-yaml-files
    yq --exit-status 'tag == "!!map" or tag== "!!seq"' ${1} > /dev/null || return 1
}

PATH_TO_SWAGGER_INFRA=${PWD}/infrastructure/swagger
PATH_TO_SWAGGER_DIST=${PATH_TO_SWAGGER_INFRA}/dist
PATH_TO_SWAGGER_BUILD=${PATH_TO_SWAGGER_DIST}/build
PATH_TO_SWAGGER_AWS=${PATH_TO_SWAGGER_DIST}/aws
PATH_TO_SWAGGER_PUBLIC=${PATH_TO_SWAGGER_DIST}/public
PATH_TO_SWAGGER_FHIR_BASE=${PATH_TO_SWAGGER_DIST}/fhir-base
PATH_TO_SWAGGER_APIGEE=${PATH_TO_SWAGGER_DIST}/apigee

mkdir -p ${PATH_TO_SWAGGER_AWS}
mkdir -p ${PATH_TO_SWAGGER_PUBLIC}
mkdir -p ${PATH_TO_SWAGGER_BUILD}
mkdir -p ${PATH_TO_SWAGGER_APIGEE}

AWS_SWAGGER_FILE=${PATH_TO_SWAGGER_AWS}/swagger.yaml
PUBLIC_SWAGGER_FILE=${PATH_TO_SWAGGER_PUBLIC}/swagger.yaml
APIGEE_SWAGGER_FILE=${PATH_TO_SWAGGER_APIGEE}/swagger.yaml
_BASE_SWAGGER_FILE=${PATH_TO_SWAGGER_BUILD}/_00_fhir_merge.yaml
_INITIAL_MERGE_SWAGGER_FILE=${PATH_TO_SWAGGER_BUILD}/_01_initial_merge.yaml
_CLEANED_SWAGGER_FILE=${PATH_TO_SWAGGER_BUILD}/_02_clean.yaml

yq eval-all '. as $item ireduce ({}; . * $item)' --output-format=yaml ${PATH_TO_SWAGGER_FHIR_BASE}/*json > ${_BASE_SWAGGER_FILE}
### GET LIST OF ALL PARAMS STARTING WITH UNDERSCORE AND THEN REMOVE REFS TO THEM
validate_yaml ${_BASE_SWAGGER_FILE}

swagger_files=$(find ${PATH_TO_SWAGGER_INFRA}/*yaml | sort -g)
yq eval-all '. as $item ireduce ({}; . * $item)' ${PATH_TO_SWAGGER_INFRA}/00_base.yaml ${_BASE_SWAGGER_FILE} ${swagger_files} > ${_INITIAL_MERGE_SWAGGER_FILE}
validate_yaml ${_INITIAL_MERGE_SWAGGER_FILE}

cat ${_INITIAL_MERGE_SWAGGER_FILE} |
    # Remove commented lines
    grep -v "^\s*#" |
    # Replace snake case terms, which are invalid in ApiGateway
    yq 'with(.components.schemas; with_entries(.key |= sub("_","")))' |
    yq 'with(.components.parameters; with_entries(.key |= sub("_","")))' |
    yq '(.. | select(has("$ref")).$ref) |= sub("_","")' |
    # Remove autogenerated parts that we don't want
    yq 'del(.paths.*.post.requestBody.content."application/x-www-form-urlencoded")' |
    yq 'del(.x-ibm-configuration)' |
    yq 'del(.components.schemas.*.discriminator)' |
    yq 'explode(.)' |
    yq '(.. | select(style == "single")) style |= "double"' |
    # Remove null dead-ends
    yq 'del(.. | select(. == null))' \
        > ${_CLEANED_SWAGGER_FILE}
validate_yaml ${_CLEANED_SWAGGER_FILE}

# Remove fields not required for apigee
if [[ ${MERGE_APIGEE} == "1" ]]; then
    cat ${_CLEANED_SWAGGER_FILE} |
        yq 'del(.paths.*.*.x-amazon-apigateway-integration)' |
        yq 'del(.x-definitions)' |
        yq 'del(.security)' |
        yq 'del(.tags)' |
        yq 'del(.paths.*.*.tags)' |
        yq 'del(.paths.*.*.security[] | select(has("${authoriser_name}")))' |
        yq 'del(.components.securitySchemes."${authoriser_name}")' \
            > ${APIGEE_SWAGGER_FILE}
    echo "Generated ${APIGEE_SWAGGER_FILE}"
    validate_yaml ${APIGEE_SWAGGER_FILE}
fi

# Remove fields not required for public docs
# * AWS specific stuff, including security & lambdas
# * security tags
# * API catalogue dislikes tags
# * /_status not public (and so also don't need StatusOK)
if [[ ${MERGE_PUBLIC} == "1" ]]; then
    cat ${_CLEANED_SWAGGER_FILE} |
        # yq 'with(.paths.*.*.responses.*.content; with_entries(.key |= . + ";version=1" ))' |
        # yq 'with(.components.requestBodies.*.content; with_entries(.key |= . + ";version=1" ))' |
        # yq 'with(.components.responses.*.content; with_entries(.key |= . + ";version=1" ))' |
        yq 'del(.paths.*.*.x-amazon-apigateway-integration)' |
        yq 'del(.x-*)' |
        yq 'del(.paths.*.*.security)' |
        yq 'del(.security)' |
        yq 'del(.tags)' |
        yq 'del(.paths.*.*.tags)' |
        yq 'del(.paths./_status)' |
        yq 'del(.. | select(has("StatusOK")).StatusOK)' |
        yq 'del(.components.securitySchemes."${authoriser_name}")' \
            > ${PUBLIC_SWAGGER_FILE}
    echo "Generated ${PUBLIC_SWAGGER_FILE}"
    validate_yaml ${PUBLIC_SWAGGER_FILE}
fi

# Remove fields not valid on AWS but otherwise required in public docs
# * 4XX codes
if [[ ${MERGE_AWS} == "1" ]]; then
    cat ${_CLEANED_SWAGGER_FILE} |
        yq 'del(.x-*)' |
        yq 'del(.. | select(has("4XX")).4XX)' \
            > ${AWS_SWAGGER_FILE}
    echo "Generated ${AWS_SWAGGER_FILE}"
    validate_yaml ${AWS_SWAGGER_FILE}
fi
