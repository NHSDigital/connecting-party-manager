name: "Workflow: Pull Request"

on: pull_request

permissions:
  id-token: write
  contents: read
  actions: write

env:
  BASE_CACHE_SUFFIX: base
  BASE_BRANCH_NAME: ${{ github.event.pull_request.base.ref }}
  BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
  CI_ROLE_NAME: ${{ secrets.CI_ROLE_NAME }}
  RUNNING_IN_CI: 1
  GITHUB_SHA_SHORT: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

jobs:
  parse-secrets:
    runs-on: [self-hosted, ci]
    steps:
      - id: parse-secrets
        run: |
          echo "::add-mask::${{ secrets.CI_ROLE_NAME }}"

  create-workspace-name:
    runs-on: [self-hosted, ci]
    outputs:
      workspace: ${{ steps.create_workspace_name.outputs.workspace }}
    steps:
      - id: create_workspace_name
        run: |
          echo "workspace=ci-$(echo ${{ env.BRANCH_NAME }} | sed -n 's/.*\/\([^-]*\)-\([^-]*\).*/\1-\2/p')-${{ env.GITHUB_SHA_SHORT }}" >> $GITHUB_OUTPUT

  workflow--check--branch-name:
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: workflow--check--branch-name

  build-head:
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: build

  build-base:
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BASE_BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: build
          cache-suffix: ${{ env.BASE_CACHE_SUFFIX }}

  workflow--codebase-checks:
    runs-on: [self-hosted, ci]
    needs: [workflow--check--branch-name, build-head]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: workflow--codebase-checks

  test--unit:
    needs: [build-head]
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/pytest-with-rerun/
        with:
          test-type: unit

  test--feature--local:
    needs: [build-head]
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: test--feature--local

  helpers--truststore-pull:
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/make/
        with:
          command: helpers--truststore-pull WORKSPACE=ref

  terraform-base-build:
    needs:
      [
        create-workspace-name,
        build-base,
        helpers--truststore-pull,
        parse-secrets,
      ]
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BASE_BRANCH_NAME }}
      - uses: ./.github/actions/terraform/
        with:
          command: plan
          workspace: ${{ needs.create-workspace-name.outputs.workspace }}
          cache-suffix: ${{ env.BASE_CACHE_SUFFIX }}
      - uses: ./.github/actions/terraform/
        with:
          command: apply
          workspace: ${{ needs.create-workspace-name.outputs.workspace }}
          cache-suffix: ${{ env.BASE_CACHE_SUFFIX }}

  terraform-head-build:
    needs:
      [
        create-workspace-name,
        build-head,
        workflow--codebase-checks,
        test--unit,
        test--feature--local,
        helpers--truststore-pull,
        parse-secrets,
        terraform-base-build,
      ]
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/terraform/
        with:
          command: plan
          workspace: ${{ needs.create-workspace-name.outputs.workspace }}
      - uses: ./.github/actions/terraform/
        with:
          command: apply
          workspace: ${{ needs.create-workspace-name.outputs.workspace }}

  test--integration:
    needs:
      [
        build-head,
        workflow--codebase-checks,
        test--unit,
        test--feature--local,
        terraform-head-build,
      ]
    runs-on: [self-hosted, ci]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
      - uses: ./.github/actions/pytest-with-rerun/
        with:
          test-type: integration
          requires-aws: true
