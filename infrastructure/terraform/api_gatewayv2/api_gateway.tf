resource "aws_apigatewayv2_api" "api_gateway_v2" {
  name          = "${var.name}--v2"
  description   = "API Gateway v2 Rest API - autogenerated from swagger"
  protocol_type = "HTTP"

  body = data.template_file.swagger.rendered
}

resource "aws_apigatewayv2_integration" "status" {
  api_id             = aws_apigatewayv2_api.api_gateway_v2.id
  integration_type   = "AWS_PROXY"
  integration_method = "GET"
  connection_type    = "INTERNET"
  # content_handling_strategy = "CONVERT_TO_TEXT"
  description          = "API Gateway v2 Rest API - Status integration"
  passthrough_behavior = "WHEN_NO_MATCH"
  integration_uri      = "arn:aws:lambda:eu-west-2:660842439611:function:nhse-cpm--jali-PI-112--status-lambda"
}

resource "aws_apigatewayv2_route" "api_gateway_v2_route" {
  api_id    = aws_apigatewayv2_api.api_gateway_v2.id
  route_key = "GET /_status"
  target    = "integrations/${aws_apigatewayv2_integration.status.id}"
}

resource "aws_apigatewayv2_deployment" "api_gateway_v2_deployment" {
  api_id      = aws_apigatewayv2_api.api_gateway_v2.id
  description = "API Gateway v2 Rest API - Deployment"

  triggers = {
    redeployment    = sha1(jsonencode(aws_apigatewayv2_api.api_gateway_v2.body))
    resource_change = "${md5(file("${path.module}/api_gateway.tf"))}"
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_apigatewayv2_stage" "api_gateway_v2_stage" {
  api_id      = aws_apigatewayv2_api.api_gateway_v2.id
  name        = "production"
  auto_deploy = true

  #   access_log_settings {
  #     destination_arn = aws_cloudwatch_log_group.api_gateway_access_logs.arn
  #     format = jsonencode({
  #       requestid : "$context.requestId",
  #       ip : "$context.identity.sourceIp",
  #       user_agent : "$context.identity.userAgent",
  #       request_time : "$context.requestTime",
  #       http_method : "$context.httpMethod",
  #       path : "$context.path",
  #       status : "$context.status",
  #       protocol : "$context.protocol",
  #       response_length : "$context.responseLength",
  #       x_correlationid : "$context.authorizer.x-correlation-id",
  #       nhsd_correlationid : "$context.authorizer.nhsd-correlation-id"
  #       environment : terraform.workspace
  #     })
  #   }
}


# module "api_gateway" {
#     source = "terraform-aws-modules/apigateway-v2/aws"
#     version = "2.2.2"

#     name          = var.name
#     description   = "API Gateway Rest API - autogenerated from swagger"
#     protocol_type = "HTTP"

#     create_api_domain_name           = false
#     create_default_stage             = true
#     create_default_stage_api_mapping = true
#     create_routes_and_integrations   = true

#     integrations = {
#         "$default" = {
#             response_templates = {
#                 "application/json" = jsonencode({
#                     resourceType : "OperationOutcome",
#                     issue : [{
#                         severity : "error",
#                         code : "processing"
#                         diagnostics : "$context.error.message"
#                     }]
#                 })
#             }

#             lambda_arn = "arn:aws:lambda:eu-west-2:660842439611:function:nhse-cpm--jali-PI-112--status-lambda"
#         }
#     }





# #   cors_configuration = {
# #     allow_headers = ["content-type", "x-amz-date", "authorization", "x-api-key", "x-amz-security-token", "x-amz-user-agent"]
# #     allow_methods = ["*"]
# #     allow_origins = ["*"]
# #   }

# #   # Custom domain
# #   domain_name                 = "terraform-aws-modules.modules.tf"
# #   domain_name_certificate_arn = "arn:aws:acm:eu-west-1:052235179155:certificate/2b3a7ed9-05e1-4f9e-952b-27744ba06da6"

# #   # Access logs
# #   default_stage_access_log_destination_arn = "arn:aws:logs:eu-west-1:835367859851:log-group:debug-apigateway"
# #   default_stage_access_log_format          = "$context.identity.sourceIp - - [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage"

#   # Routes and integrations
# #   integrations = {
# #     "POST /Organizations" = {
# #       lambda_arn             = "arn:aws:lambda:eu-west-1:052235179155:function:my-default-function"
# #       payload_format_version = "2.0"
# #       timeout_milliseconds   = 12000
# #     }

# #     # "GET /some-route-with-authorizer" = {
# #     #   integration_type = "HTTP_PROXY"
# #     #   integration_uri  = "some url"
# #     #   authorizer_key   = "azure"
# #     # }

# #     # "$default" = {
# #     #   lambda_arn = "arn:aws:lambda:eu-west-1:052235179155:function:my-default-function"
# #     # }
# #   }

# #   authorizers = {
# #     "azure" = {
# #       authorizer_type  = "JWT"
# #       identity_sources = "$request.header.Authorization"
# #       name             = "azure-auth"
# #       audience         = ["d6a38afd-45d6-4874-d1aa-3c5c558aqcc2"]
# #       issuer           = "https://sts.windows.net/aaee026e-8f37-410e-8869-72d9154873e4/"
# #     }
# #   }

#     body = data.template_file.swagger.rendered

#     tags = {
#         Name = replace(var.name, "_", "-")
#     }
# }
